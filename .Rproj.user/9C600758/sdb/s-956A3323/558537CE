{
    "collab_server" : "",
    "contents" : "################################################################################\n### generate some simulated data to test beastify\n\nlibrary( dplyr )\nlibrary( phyclust )\nlibrary( ape )\n\n################################################################################\n### load sequence data\n\ntest_fasta <- ape::read.dna( file = \"test_data/test.fasta\", format = 'fasta' )\ntest_gff <- readr::read_tsv( file = \"test_data/test.gff\", comment = \"#\", col_names = F )\nnames( test_gff ) <- c( \"reference\", \"source\",\"feature\", \"start\", \"end\", \"score\", \"strand\", \"phase\", \"description\" )\n\n# remove first row, which has information about the whole sequence\ntest_gff <- test_gff %>% \n  dplyr::filter( feature != 'source' )\n\ntest_gff %>% dplyr::group_by( feature ) %>% dplyr::summarise( count = n() )\n# table of features\n\ntest_gff %>% \n  dplyr::group_by( feature ) %>%\n  dplyr::mutate( feature_length = end - start + 1 ) %>%\n  dplyr::select( description )\n  dplyr::summarise( sum( feature_length ) )\n# table of total length of features\n\n# intergenic regions\ntest_gff_cds <- test_gff %>%\n  dplyr::filter( feature == 'CDS' ) %>%\n  dplyr::select( end, start )\n\ntest_gff_cds\nintergenetic_regions <- data.frame( start = (test_gff_cds$end[-nrow( test_gff_cds )] + 1), \n                                    end = (test_gff_cds$start[-1] - 1) ) \n\nintergenetic_regions %>%\n  dplyr::mutate( length_intergenic = end - start + 1) %>%\n  dplyr::filter( length_intergenic > 0 ) %>%\n  dplyr::summarise( sum( length_intergenic ) )\n\nhead( test_gff_cds, n = 8 )\n################################################################################\n### index all positions\nn_bases <- length( test_fasta )\n\nmake_site_table <- function( positions, n_bases, features ) {\n  # partitions are numeric:\n  # 1 - 1st codon position\n  # 2 - 2nd codon position\n  # 3 - 3rd codon position\n  # 4 - shared codon positions\n  # 5 - other genetic positions\n  filtered_sites <- positions %>%\n    dplyr::filter( feature %in% features )\n  references = unique( positions$reference )\n  index_sites <- dplyr::bind_rows(\n    mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n ) }, \n           references, n_bases, SIMPLIFY = F)\n  )\n  \n  return( index_sites )\n}\n\nhead( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )\n\nunpack_sites <- function( feature_row ) {\n  if (feature_row$strand == '+' ) {\n    start = feature_row$start + feature_row$phase\n    end = feature_row$end\n    total_length <- end - start + 1\n    increment = 3\n  } else {\n    start = feature_row$end - feature_row$phase\n    end = feature_row$start\n    total_length <- start - end + 1\n    increment = -3\n  }\n  description <- strsplit( feature_row$description, split = ';' )[[1]]\n  locus_tag_ix <- pmatch( x = 'locus_tag', table = description )\n  locus_tag <- gsub(pattern = \" \", replacement = '', \n       gsub(pattern = \"\\\"\", replacement = '', \n            gsub( pattern = 'locus_tag', \n                  replacement = \"\", description[locus_tag_ix] ) ) )\n  index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ), locus_tag = locus_tag, stringsAsFactors = F )\n  return( index_sites )\n}\n\ntmp <- test_gff %>%\n  dplyr::filter( feature == 'CDS' ) %>%\n  purrr::by_row( unpack_sites, .collate = \"rows\" ) %>%\n  dplyr::select( pos, partition, locus_tag ) %>%\n  dplyr::arrange( pos )\n\ntmp <- tmp %>%\n  dplyr::group_by(pos) %>%\n  dplyr::mutate( partition = ifelse( length( pos ) > 1, 4, partition ) )\n\ntmp_dist <- tmp %>% \n  dplyr::select( pos, partition ) %>%\n  dplyr::distinct()\nnrow( tmp )\nnrow( tmp_dist )\n\nall_sites = data.frame( reference = \"NCXXXX\", pos = 1:n_bases )\nall_sites <- all_sites %>%\n  dplyr::left_join( tmp_dist, c('pos' = 'pos' ) ) %>%\n  tidyr::replace_na( list( partition = 5 ) )",
    "created" : 1458088920991.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "348301632",
    "id" : "558537CE",
    "lastKnownWriteTime" : 1459302690,
    "last_content_update" : 1459302690564,
    "path" : "~/Dropbox/projects/beastify/test_data/test_data.R",
    "project_path" : "test_data/test_data.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}