library( phyclust )
library( ape )
test_fasta <- ape::read.dna( file = "test_data/test.fasta", format = 'fasta' )
test_gff <- readr::read_tsv( file = "test_data/test.gff", comment = "#", col_names = F )
names( test_gff ) <- c( "reference", "source","feature", "start", "end", "score", "strand", "phase", "description" )
# remove first row, which has information about the whole sequence
test_gff <- test_gff %>%
dplyr::filter( feature != 'source' )
test_gff %>% dplyr::group_by( feature ) %>% dplyr::summarise( count = n() )
# table of features
test_gff %>%
dplyr::group_by( feature ) %>%
dplyr::mutate( feature_length = end - start + 1 ) %>%
dplyr::select( description )
dplyr::summarise( sum( feature_length ) )
# table of total length of features
# intergenic regions
test_gff_cds <- test_gff %>%
dplyr::filter( feature == 'CDS' ) %>%
dplyr::select( end, start )
test_gff_cds
intergenetic_regions <- data.frame( start = (test_gff_cds$end[-nrow( test_gff_cds )] + 1),
end = (test_gff_cds$start[-1] - 1) )
intergenetic_regions %>%
dplyr::mutate( length_intergenic = end - start + 1) %>%
dplyr::filter( length_intergenic > 0 ) %>%
dplyr::summarise( sum( length_intergenic ) )
length( test_fasta )
n_bases <- length( test_fasta )
test_gff_cds
test_gff
make_site_table <- function( positions, n_bases, feature ) {
filtered_sites <- positions %>%
dplyr::filter( feature %in% feature )
return( filtered_sites )
}
head( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )
make_site_table <- function( positions, n_bases, features ) {
filtered_sites <- positions %>%
dplyr::filter( feature %in% features )
return( filtered_sites )
}
head( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )
make_site_table <- function( positions, n_bases, features ) {
# partitions are numeric:
# 1 - 1st codon position
# 2 - 2nd codon position
# 3 - 3rd codon position
# 4 - shared codon positions
# 5 - other genetic positions
filtered_sites <- positions %>%
dplyr::filter( feature %in% features )
references = unique( positions$reference )
index_sites <- dplyr::bind_rows(
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5 ) }, references, n_bases)
)
return( index_sites )
}
head( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )
make_site_table <- function( positions, n_bases, features ) {
# partitions are numeric:
# 1 - 1st codon position
# 2 - 2nd codon position
# 3 - 3rd codon position
# 4 - shared codon positions
# 5 - other genetic positions
filtered_sites <- positions %>%
dplyr::filter( feature %in% features )
references = unique( positions$reference )
index_sites <- dplyr::bind_rows(
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5 ) }, references, n_bases)
)
return( index_sites )
}
head( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )
make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' )
debug( make_site_table )
make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' )
references
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5 ) }, references, n_bases)
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5 ) }, references, n_bases, stringAsFactor = F)
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases)
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [[1]]
head( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [[1]] )
head( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [1] )
head( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [1] )
str( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [1] )
str( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) [[1]] )
str( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) )
as.data.frame( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) )
head( as.data.frame( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) ) )
str( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases) )
?mapply
str( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases, SIMPLIFY = F) )
head( mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5, stringsAsFactors = F ) }, references, n_bases, SIMPLIFY = F) )
make_site_table <- function( positions, n_bases, features ) {
# partitions are numeric:
# 1 - 1st codon position
# 2 - 2nd codon position
# 3 - 3rd codon position
# 4 - shared codon positions
# 5 - other genetic positions
filtered_sites <- positions %>%
dplyr::filter( feature %in% features )
references = unique( positions$reference )
index_sites <- dplyr::bind_rows(
mapply(FUN = function(p, n) { data.frame( key = 1:n, chr = p, pos = 1:n, partition = 5 ) }, references, n_bases, SIMPLIFY = F)
)
return( index_sites )
}
head( make_site_table( test_gff, n_bases = n_bases, feature = 'CDS' ) )
?purrr
?purrr::map
head( test_gff )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' )
10:5
unpack_sites <- function( feature_row ) {
if (strand == '+' ) {
start = feature_row$start + feature_row$strand
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$strand
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::map_df( unpack_sites )
unpack_sites <- function( feature_row ) {
print( feature_row )
if (strand == '+' ) {
start = feature_row$start + feature_row$strand
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$strand
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::map_df( unpack_sites )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::map( unpack_sites )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
dplyr::rowwise() %>%
purrr::map( unpack_sites )
unpack_sites <- function( start, end, stran ) {
print( feature_row )
if (strand == '+' ) {
start = feature_row$start + feature_row$strand
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$strand
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
unpack_sites <- function( start, end, strand, phase ) {
print( feature_row )
if (strand == '+' ) {
start = start + phase
end = end
total_length <- end - start + 1
} else {
start = end - phase
end = start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
dplyr::rowwise() %>%
purrr::map( unpack_sites )
unpack_sites <- function( start, end, strand, phase ) {
if (strand == '+' ) {
start = start + phase
end = end
total_length <- end - start + 1
} else {
start = end - phase
end = start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
#dplyr::rowwise() %>%
purrr::map( unpack_sites )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
#dplyr::rowwise() %>%
purrr::map( unpack_sites, start, end, strand, phase )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
#dplyr::rowwise() %>%
purrr::map( unpack_sites( start, end, strand, phase ) )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' )
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
#dplyr::rowwise() %>%
purrr::map( unpack_sites( start, end, strand, phase ) )
unpack_sites <- function( feature_row ) {
print( feature_row )
if (strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
unpack_sites <- function( feature_row ) {
print( feature_row )
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
}
return( c( start, end, total_length, total_length/3 ))
}
head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
tmp$.out
seq( 10, 5 )
seq( 10, 5, 3 )
seq( 10, 5, by = 3)
seq( 10, 3, by = 3)
?seq
seq( 10, 3, by = -3)
seq(3, 10 , by = -3)
seq(3, 10 , by = 3)
index_sites <- data.frame( pos = start:end, partition = rep(c(1, 2, 3), total_length/3) )
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
index_sites <- data.frame( pos = start:end, partition = rep(c(1, 2, 3), total_length/3) )
return( index_sites ))
}
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ) )
return( index_sites )
}
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
tmp$.out
tmp$description
gsub( pattern = "(locus_tag .*);.*", replacement = "\\1", tmp$description )
gsub( pattern = "(locus_tag .*)\;.*", replacement = "\\1", tmp$description )
gsub( pattern = "(locus_tag .*);.*", replacement = "\\1", tmp$description )
strsplit( tmp$description, split = ";")
lapply( strsplit( tmp$description, split = ";"), function(x) {}
strsplit( tmp$description, split = ";")[[1]]
match(x = strsplit( tmp$description, split = ";")[[1]], table = 'locus_tag' )
pmatch(x = strsplit( tmp$description, split = ";")[[1]], table = 'locus_tag' )
pmatch(x = strsplit( tmp$description, split = ";")[[1]], table = list( 'locus_tag') )
?pmatch
pmatch(table = strsplit( tmp$description, split = ";")[[1]], x = 'locus_tag' )
strsplit( tmp$description, split = ";")[[1]]
strsplit( tmp$description, split = ";")[[1]][1]
gsub( pattern = 'locus_tag', strsplit( tmp$description, split = ";")[[1]][1] )
gsub( pattern = 'locus_tag', replacement = "", strsplit( tmp$description, split = ";")[[1]][1] )
gsub(pattern = "\"", replacement = '', gsub( pattern = 'locus_tag', replacement = "", strsplit( tmp$description, split = ";")[[1]][1] ) )
gsub(pattern = " \"", replacement = '', gsub( pattern = 'locus_tag', replacement = "", strsplit( tmp$description, split = ";")[[1]][1] ) )
gsub(pattern = "\"", replacement = '', gsub( pattern = 'locus_tag', replacement = "", strsplit( tmp$description, split = ";")[[1]][1] ) )
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
description <- strsplit( feature_row$description, split = ';' )
locus_tag_ix <- pmatch( x = 'locus_tag', table = description )
locus_tag <- gsub(pattern = " ", replacement = '',
gsub(pattern = "\"", replacement = '',
gsub( pattern = 'locus_tag',
replacement = "", description[locus_tab_ix] ) ) )
index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ), locus_tag = locus_tag )
return( index_sites )
}
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
description <- strsplit( feature_row$description, split = ';' )
locus_tag_ix <- pmatch( x = 'locus_tag', table = description )
locus_tag <- gsub(pattern = " ", replacement = '',
gsub(pattern = "\"", replacement = '',
gsub( pattern = 'locus_tag',
replacement = "", description[locus_tag_ix] ) ) )
index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ), locus_tag = locus_tag )
return( index_sites )
}
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
tmp$.out
head( tmp$.out )
debug( unpack_sites )
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
description
locus_tab_ix
locus_tag_ix
pmatch( x = 'locus_tag', table = description)
pmatch( x = 'locus_tag', table = description[[1]])
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
description <- strsplit( feature_row$description, split = ';' )[[1]]
locus_tag_ix <- pmatch( x = 'locus_tag', table = description )
locus_tag <- gsub(pattern = " ", replacement = '',
gsub(pattern = "\"", replacement = '',
gsub( pattern = 'locus_tag',
replacement = "", description[locus_tag_ix] ) ) )
index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ), locus_tag = locus_tag )
return( index_sites )
}
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites )
head( tmp$.out )
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites ) %>%
dplyr::select(.out)
tmp
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites ) %>%
dplyr::select(.out) %>%
dplyr::bind_rows()
head( tmp )
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites, .collate = "rows" )
head( tmp )
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites, .collate = "rows" ) %>%
dplyr::select( pos, partition, locus_tag ) %>%
dplyr::arrange( pos )
head( tmp )
unpack_sites <- function( feature_row ) {
if (feature_row$strand == '+' ) {
start = feature_row$start + feature_row$phase
end = feature_row$end
total_length <- end - start + 1
increment = 3
} else {
start = feature_row$end - feature_row$phase
end = feature_row$start
total_length <- start - end + 1
increment = -3
}
description <- strsplit( feature_row$description, split = ';' )[[1]]
locus_tag_ix <- pmatch( x = 'locus_tag', table = description )
locus_tag <- gsub(pattern = " ", replacement = '',
gsub(pattern = "\"", replacement = '',
gsub( pattern = 'locus_tag',
replacement = "", description[locus_tag_ix] ) ) )
index_sites <- data.frame( pos = start:end, partition = rep( c(1, 2, 3), total_length/3 ), locus_tag = locus_tag, stringsAsFactors = F )
return( index_sites )
}
tmp <- head( test_gff ) %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites, .collate = "rows" ) %>%
dplyr::select( pos, partition, locus_tag ) %>%
dplyr::arrange( pos )
tmp
tmp <- test_gff %>%
dplyr::filter( feature == 'CDS' ) %>%
purrr::by_row( unpack_sites, .collate = "rows" ) %>%
dplyr::select( pos, partition, locus_tag ) %>%
dplyr::arrange( pos )
head( tmp )
nrow( tmp )
?duplicated
tmp %>%
dplyr::group_by(pos) %>%
dplyr::filter(length( pop ) > 1 )
tmp %>%
dplyr::group_by(pos) %>%
dplyr::filter(length( pos ) > 1 )
tmp <- tmp %>%
dplyr::group_by(pos) %>%
dplyr::mutate( partition = ifelse( length( pos ) > 1, 4, partition ) )
head( tmp )
tmp %>%
dplyr::filter( pos == 4 )
tmp %>%
dplyr::filter( partition == 4 )
tmp_dist <- tmp %>%
dplyr::select( pos, partition ) %>%
dplyr::distinct()
nrow( tmp_dist )
nrow( tmp )
all_sites = data.frame( reference = "NCXXXX", pos = 1:n_bases )
?left_join
all_sites <- all_sites %>%
dplyr::left_join( tmp_dist, c('pos' = 'pos' ) )
head( all_sites )
all_sites = data.frame( reference = "NCXXXX", pos = 1:n_bases )
all_sites <- all_sites %>%
dplyr::left_join( tmp_dist, c('pos' = 'pos' ), fill = 5 )
head( all_sites )
?replace_na
all_sites = data.frame( reference = "NCXXXX", pos = 1:n_bases )
all_sites <- all_sites %>%
dplyr::left_join( tmp_dist, c('pos' = 'pos' ) ) %>%
tidyr::replace_na( partition = 5 )
head( all_sites )
all_sites = data.frame( reference = "NCXXXX", pos = 1:n_bases )
all_sites <- all_sites %>%
dplyr::left_join( tmp_dist, c('pos' = 'pos' ) ) %>%
tidyr::replace_na( list( partition = 5 ) )
head( all_sites )
all_sites %>%
dplyr::group_by( partition ) %>%
dplyr::summarise( count = n() )
